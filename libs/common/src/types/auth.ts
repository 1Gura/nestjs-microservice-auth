// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Metadata } from '@grpc/grpc-js';

export const protobufPackage = "auth";

/** Сообщение для отправки данных для логина */
export interface LoginRequest {
  /** Имя пользователя */
  username: string;
  /** Пароль пользователя */
  password: string;
  email?: string | undefined;
}

/** Сообщение для ответа на запрос логина */
export interface LoginResponse {
  /** Токен для аутентификации (JWT или другой) */
  accessToken: string;
  /** Рефреш-токен для обновления доступа */
  refreshToken: string;
  /** Успешность логина */
  success: boolean;
  /** Сообщение об ошибке или успехе */
  message: string;
  user: UserInfoRequest | undefined;
}

/** Сообщение для регистрации нового пользователя */
export interface RegisterRequest {
  /** Имя пользователя */
  username: string;
  /** Пароль */
  password: string;
  /** Электронная почта */
  email: string;
}

/** Ответ на запрос регистрации */
export interface RegisterResponse {
  /** Успешность регистрации */
  success: boolean;
  /** Сообщение об ошибке или успехе */
  message: string;
  /** токен */
  accessToken: string;
  /** Рефреш-токен для обновления доступа */
  refreshToken: string;
  user: UserInfoRequest | undefined;
}

/** Сообщение для рефреша токена */
export interface RefreshTokenRequest {
  /** Токен для проверки */
  refreshToken: string;
}

/** Ответ на запрос рефреша токена */
export interface RefreshTokenResponse {
  /** Является ли токен действительным */
  valid: boolean;
  /** Сообщение о статусе токена */
  message: string;
  /** Токен для аутентификации (JWT или другой) */
  accessToken: string;
  /** Рефреш-токен для обновления доступа */
  refreshToken: string;
}

/** Сообщение для запроса на выход (logout) */
export interface LogoutRequest {
  /** Токен, который нужно отозвать */
  token: string;
}

/** Ответ на запрос выхода */
export interface LogoutResponse {
  /** Успешность выхода */
  success: boolean;
  /** Сообщение */
  message: string;
}

/** Сообщение для изменения пароля */
export interface ChangePasswordRequest {
  /** Имя пользователя */
  username: string;
  /** Старый пароль */
  oldPassword: string;
  /** Новый пароль */
  newPassword: string;
}

/** Ответ на запрос изменения пароля */
export interface ChangePasswordResponse {
  /** Успешность изменения пароля */
  success: boolean;
  /** Сообщение */
  message: string;
}

/** Сообщение для получения данных пользователя */
export interface UserInfoRequest {
  /** Имя пользователя */
  username: string;
  id: string;
  email: string;
}

/** Ответ на запрос получения информации о пользователе */
export interface UserInfoResponse {
  /** Имя пользователя */
  username: string;
  /** Электронная почта */
  email: string;
  /** Дата создания аккаунта */
  createdAt: string;
}

export const AUTH_PACKAGE_NAME = "auth";

/** Сервис аутентификации и авторизации */

export interface AuthServiceClient {
  /** Метод для логина */

  login(request: LoginRequest, metadata: Metadata): Observable<LoginResponse>;

  /** Метод для регистрации */

  register(request: RegisterRequest, metadata: Metadata): Observable<RegisterResponse>;

  /** Метод для рефреша access токена и обновления рефреш токена */

  refreshToken(request: RefreshTokenRequest, metadata: Metadata): Observable<RefreshTokenResponse>;

  /** Метод для выхода из системы */

  logout(request: LogoutRequest): Observable<LogoutResponse>;

  /** Метод для изменения пароля */

  changePassword(request: ChangePasswordRequest): Observable<ChangePasswordResponse>;

  /** Метод для получения информации о пользователе */

  userInfo(request: UserInfoRequest): Observable<UserInfoResponse>;
}

/** Сервис аутентификации и авторизации */

export interface AuthServiceController {
  /** Метод для логина */

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** Метод для регистрации */

  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  /** Метод для рефреша access токена и обновления рефреш токена */

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  /** Метод для выхода из системы */

  logout(request: LogoutRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  /** Метод для изменения пароля */

  changePassword(
    request: ChangePasswordRequest,
  ): Promise<ChangePasswordResponse> | Observable<ChangePasswordResponse> | ChangePasswordResponse;

  /** Метод для получения информации о пользователе */

  userInfo(request: UserInfoRequest): Promise<UserInfoResponse> | Observable<UserInfoResponse> | UserInfoResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "register", "refreshToken", "logout", "changePassword", "userInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
